// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/apis/control/v1/remote.proto

package v1

import (
	context "context"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentControlClient is the client API for AgentControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentControlClient interface {
	GetHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.Health, error)
}

type agentControlClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentControlClient(cc grpc.ClientConnInterface) AgentControlClient {
	return &agentControlClient{cc}
}

func (c *agentControlClient) GetHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.Health, error) {
	out := new(v1.Health)
	err := c.cc.Invoke(ctx, "/control.AgentControl/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentControlServer is the server API for AgentControl service.
// All implementations must embed UnimplementedAgentControlServer
// for forward compatibility
type AgentControlServer interface {
	GetHealth(context.Context, *emptypb.Empty) (*v1.Health, error)
	mustEmbedUnimplementedAgentControlServer()
}

// UnimplementedAgentControlServer must be embedded to have forward compatible implementations.
type UnimplementedAgentControlServer struct {
}

func (UnimplementedAgentControlServer) GetHealth(context.Context, *emptypb.Empty) (*v1.Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedAgentControlServer) mustEmbedUnimplementedAgentControlServer() {}

// UnsafeAgentControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentControlServer will
// result in compilation errors.
type UnsafeAgentControlServer interface {
	mustEmbedUnimplementedAgentControlServer()
}

func RegisterAgentControlServer(s grpc.ServiceRegistrar, srv AgentControlServer) {
	s.RegisterService(&AgentControl_ServiceDesc, srv)
}

func _AgentControl_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentControlServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.AgentControl/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentControlServer).GetHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentControl_ServiceDesc is the grpc.ServiceDesc for AgentControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.AgentControl",
	HandlerType: (*AgentControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _AgentControl_GetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/apis/control/v1/remote.proto",
}
