// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rules/types.go

// Package mock_rules is a generated GoMock package.
package mock_rules

// import (
// 	context "context"
// 	reflect "reflect"

// 	gomock "github.com/golang/mock/gomock"
// 	rules "github.com/rancher/opni/pkg/rules"
// )

// // MockUpdateGroup is a mock of UpdateGroup interface.
// type MockUpdateGroup struct {
// 	ctrl     *gomock.Controller
// 	recorder *MockUpdateGroupMockRecorder
// }

// // MockUpdateGroupMockRecorder is the mock recorder for MockUpdateGroup.
// type MockUpdateGroupMockRecorder struct {
// 	mock *MockUpdateGroup
// }

// // NewMockUpdateGroup creates a new mock instance.
// func NewMockUpdateGroup(ctrl *gomock.Controller) *MockUpdateGroup {
// 	mock := &MockUpdateGroup{ctrl: ctrl}
// 	mock.recorder = &MockUpdateGroupMockRecorder{mock}
// 	return mock
// }

// // EXPECT returns an object that allows the caller to indicate expected use.
// func (m *MockUpdateGroup) EXPECT() *MockUpdateGroupMockRecorder {
// 	return m.recorder
// }

// // CloneRuleGroup mocks base method.
// func (m *MockUpdateGroup) CloneRuleGroup(arg0 rules.UpdateGroup) rules.UpdateGroup {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "CloneRuleGroup", arg0)
// 	ret0, _ := ret[0].(rules.UpdateGroup)
// 	return ret0
// }

// // CloneRuleGroup indicates an expected call of CloneRuleGroup.
// func (mr *MockUpdateGroupMockRecorder) CloneRuleGroup(arg0 interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneRuleGroup", reflect.TypeOf((*MockUpdateGroup)(nil).CloneRuleGroup), arg0)
// }

// // CloneRuleGroupList mocks base method.
// func (m *MockUpdateGroup) CloneRuleGroupList(arg0 rules.UpdateGroup) []rules.UpdateGroup {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "CloneRuleGroupList", arg0)
// 	ret0, _ := ret[0].([]rules.UpdateGroup)
// 	return ret0
// }

// // CloneRuleGroupList indicates an expected call of CloneRuleGroupList.
// func (mr *MockUpdateGroupMockRecorder) CloneRuleGroupList(arg0 interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneRuleGroupList", reflect.TypeOf((*MockUpdateGroup)(nil).CloneRuleGroupList), arg0)
// }

// // MockRuleFinder is a mock of RuleFinder interface.
// type MockRuleFinder struct {
// 	ctrl     *gomock.Controller
// 	recorder *MockRuleFinderMockRecorder
// }

// // MockRuleFinderMockRecorder is the mock recorder for MockRuleFinder.
// type MockRuleFinderMockRecorder struct {
// 	mock *MockRuleFinder
// }

// // NewMockRuleFinder creates a new mock instance.
// func NewMockRuleFinder(ctrl *gomock.Controller) *MockRuleFinder {
// 	mock := &MockRuleFinder{ctrl: ctrl}
// 	mock.recorder = &MockRuleFinderMockRecorder{mock}
// 	return mock
// }

// // EXPECT returns an object that allows the caller to indicate expected use.
// func (m *MockRuleFinder) EXPECT() *MockRuleFinderMockRecorder {
// 	return m.recorder
// }

// // FindGroups mocks base method.
// func (m *MockRuleFinder) FindGroups(ctx context.Context) ([]rules.UpdateGroup, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "FindGroups", ctx)
// 	ret0, _ := ret[0].([]rules.UpdateGroup)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // FindGroups indicates an expected call of FindGroups.
// func (mr *MockRuleFinderMockRecorder) FindGroups(ctx interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGroups", reflect.TypeOf((*MockRuleFinder)(nil).FindGroups), ctx)
// }

// // MockUpdateNotifier is a mock of UpdateNotifier interface.
// type MockUpdateNotifier struct {
// 	ctrl     *gomock.Controller
// 	recorder *MockUpdateNotifierMockRecorder
// }

// // MockUpdateNotifierMockRecorder is the mock recorder for MockUpdateNotifier.
// type MockUpdateNotifierMockRecorder struct {
// 	mock *MockUpdateNotifier
// }

// // NewMockUpdateNotifier creates a new mock instance.
// func NewMockUpdateNotifier(ctrl *gomock.Controller) *MockUpdateNotifier {
// 	mock := &MockUpdateNotifier{ctrl: ctrl}
// 	mock.recorder = &MockUpdateNotifierMockRecorder{mock}
// 	return mock
// }

// // EXPECT returns an object that allows the caller to indicate expected use.
// func (m *MockUpdateNotifier) EXPECT() *MockUpdateNotifierMockRecorder {
// 	return m.recorder
// }

// // NotifyC mocks base method.
// func (m *MockUpdateNotifier) NotifyC(ctx context.Context) <-chan []rules.UpdateGroup {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "NotifyC", ctx)
// 	ret0, _ := ret[0].(<-chan []rules.UpdateGroup)
// 	return ret0
// }

// // NotifyC indicates an expected call of NotifyC.
// func (mr *MockUpdateNotifierMockRecorder) NotifyC(ctx interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyC", reflect.TypeOf((*MockUpdateNotifier)(nil).NotifyC), ctx)
// }
