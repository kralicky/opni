// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/metrics/collector/remote.proto

package collector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteCollectorClient is the client API for RemoteCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteCollectorClient interface {
	Describe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DescriptorList, error)
	Collect(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetricList, error)
}

type remoteCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteCollectorClient(cc grpc.ClientConnInterface) RemoteCollectorClient {
	return &remoteCollectorClient{cc}
}

func (c *remoteCollectorClient) Describe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DescriptorList, error) {
	out := new(DescriptorList)
	err := c.cc.Invoke(ctx, "/collector.RemoteCollector/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCollectorClient) Collect(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetricList, error) {
	out := new(MetricList)
	err := c.cc.Invoke(ctx, "/collector.RemoteCollector/Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteCollectorServer is the server API for RemoteCollector service.
// All implementations must embed UnimplementedRemoteCollectorServer
// for forward compatibility
type RemoteCollectorServer interface {
	Describe(context.Context, *emptypb.Empty) (*DescriptorList, error)
	Collect(context.Context, *emptypb.Empty) (*MetricList, error)
	mustEmbedUnimplementedRemoteCollectorServer()
}

// UnimplementedRemoteCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteCollectorServer struct {
}

func (UnimplementedRemoteCollectorServer) Describe(context.Context, *emptypb.Empty) (*DescriptorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedRemoteCollectorServer) Collect(context.Context, *emptypb.Empty) (*MetricList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedRemoteCollectorServer) mustEmbedUnimplementedRemoteCollectorServer() {}

// UnsafeRemoteCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteCollectorServer will
// result in compilation errors.
type UnsafeRemoteCollectorServer interface {
	mustEmbedUnimplementedRemoteCollectorServer()
}

func RegisterRemoteCollectorServer(s grpc.ServiceRegistrar, srv RemoteCollectorServer) {
	s.RegisterService(&RemoteCollector_ServiceDesc, srv)
}

func _RemoteCollector_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCollectorServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collector.RemoteCollector/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCollectorServer).Describe(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCollector_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCollectorServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collector.RemoteCollector/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCollectorServer).Collect(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteCollector_ServiceDesc is the grpc.ServiceDesc for RemoteCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collector.RemoteCollector",
	HandlerType: (*RemoteCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Describe",
			Handler:    _RemoteCollector_Describe_Handler,
		},
		{
			MethodName: "Collect",
			Handler:    _RemoteCollector_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/metrics/collector/remote.proto",
}
