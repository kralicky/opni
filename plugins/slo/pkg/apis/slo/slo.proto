syntax = "proto3";
option go_package = "github.com/rancher/opni/pkg/plugins/slo/pkg/apis/slo";

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/api/http.proto";
import "google/api/annotations.proto";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";


package slo;

service SLO {
  // ============== SLO
  rpc CreateSLO(ServiceLevelObjective) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/slos"
      body: "*"
    };
  }
  rpc GetSLO(core.Reference) returns (ServiceLevelObjective) {
    option (google.api.http) = {
      get: "/slos/{id}"
    };
  }
  rpc ListSLOs(google.protobuf.Empty) returns (ServiceLevelObjectiveList) {
    option (google.api.http) = {
      get: "/slos"
    };
  }
  rpc UpdateSLO(ServiceLevelObjective) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/slos/{id}"
      body: "*"
    };
  }
  rpc DeleteSLO(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/slos/{id}"
    };
  }
  rpc CloneSLO(core.Reference) returns (ServiceLevelObjective) {
    option (google.api.http) = {
      post: "/slos/{id}/clone"
    };
  }

  // ================ Poll SLO Status
  rpc Status(core.Reference) returns (SLOStatus) {
    option (google.api.http) = {
      get: "/slos/{id}/status"
    };
  }

  // Can this metric run with this service & cluster? No == error
  rpc GetMetricId(MetricRequest) returns (Metric) {
    option (google.api.http) = {
      get: "/metrics/{name}/{serviceId}"
    };
  }
  rpc ListMetrics(google.protobuf.Empty) returns (MetricList) {
    option (google.api.http) = {
      get: "/metrics"
    };
  }
  // ================ Formula : Human readable format for metrics
  rpc GetFormulas(core.Reference) returns (Formula) {
    option (google.api.http) = {
      get: "/formulas/{id}"
    };
  }
  rpc ListFormulas(google.protobuf.Empty) returns (FormulaList) {
    option (google.api.http) = {
      get: "/formulas"
    };
  }

  rpc SetState(SetStateRequest) returns (google.protobuf.Empty);
  rpc GetState(core.Reference) returns (State);

  // ========== Services API ===========
  rpc GetService(core.Reference) returns (Service) {
    option (google.api.http) = {
      get: "/services/{id}"
    };
  }
  rpc ListServices(google.protobuf.Empty) returns (ServiceList) {
    option (google.api.http) = {
      get: "/services"
    };
  }
}

message Service {
  string jobId = 1;
  string metricName = 2; 
  string metricId = 3;
  string clusterId = 4;
}

message ServiceList {
  repeated Service items = 1;
}

message Label {
  string name = 1;
}

message Alert {
  string name = 1;
  string notificationTarget = 2; // enum of Slack, PagerDuty, Email, SMS, etc..
  string notificationDescription = 3;
  string description = 4;
  string conditionType = 5;
  string thresholdType = 6;
  bool onNoData = 7;
  bool onCreate = 8;
  bool onBreach = 9;
  bool onResolved = 10;
}

message ServiceLevelObjective {
  string id = 1;
  string name = 2;
  string datasource = 3;
  string description = 4;
  repeated Service services = 5;
  string monitorWindow = 6; // 7d, 28d or 30d
  string metricDescription = 8;
  string budgetingInterval = 9; // in the format 5m, 1h etc..
  repeated Label labels = 10;
  repeated Target targets = 11;
  repeated Alert alerts = 12;
}

message Target {
  uint64 ValueX100 = 1;
  google.protobuf.Duration timeWindow = 2; // FIXME: should be changed to str
}

message ServiceLevelObjectiveList {
  repeated ServiceLevelObjective items = 1;
}

// TODO : rework this
message SLOStatus {
  core.Reference slo = 1;
  int64 timestamp = 2;
  Evaluation status = 3;
  Evaluation budget = 4;
}

message MetricList {
  repeated Metric items = 1;
}


message SetStateRequest {
  core.Reference slo = 1;
  State state = 2;
}

// Contains all the SLO data like, error budget, burn rate, etc...
message State {
  bytes data = 1;
}

/// Human readable pre-configured metrics
message Formula {
  string id = 1;
  string name = 2;
  string description = 3;
}

message FormulaList {
  repeated Formula items = 1;
}

message Evaluation {
  double rate = 1;
  double period = 2;
}

message Metric {
  string name = 1;
  string datasource = 2;
  string clusterId = 3;
  string serviceId = 4;
  string metricId = 5;
}

message MetricRequest {
  string name = 1;
  string datasource = 2;
  string serviceId = 3;
  string clusterId = 4;
}